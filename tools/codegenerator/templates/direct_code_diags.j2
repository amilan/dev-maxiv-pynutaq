{% extends "base.j2" %}
{% block defines %}
#!/usr/bin/env python

###############################################################################
#     NutaqDiags device server.
#
#     Copyright (C) 2013  Max IV Laboratory, Lund Sweden
#
#     This program is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see [http://www.gnu.org/licenses/].
###############################################################################

"""This module contains the Nutaq device server for diagnostics.
"""

__all__ = ["NutaqDiags", "run_device"]

__author__ = 'antmil'

__docformat__ = 'restructuredtext'

# standard library imports
import time
import numpy
import math
import datetime

# 3rd party imports
from PyTango import AttrQuality, AttrWriteType, DispLevel, DevState, DebugIt
from PyTango.server import Device, DeviceMeta, attribute, command, run
from PyTango.server import device_property

# local imports
#from pynutaq.nutaqattributes import attributes_dict
from pynutaq.nutaq.nutaqdefs import *

import pynutaq.extra as extra_func

import pynutaq.perseus.perseusutils as perseus_utils

try:
    from pynutaq.perseus.perseusdefs import *
    from pynutaq.perseus.perseusfactory import Perseus
except ImportError, e:
    print e


class NutaqDiags(Device):
    __metaclass__ = DeviceMeta

{% endblock %}

{% block static_methods %}
    ItckNumber = attribute(label='ItckNumber',
                       dtype=int,
                       display_level=DispLevel.OPERATOR,
                       access=AttrWriteType.READ_WRITE,
                       unit='',
                       format='%6.2f',
                       min_value=0, max_value=7,
                       fget="get_ItckNumber",
                       fset="set_ItckNumber",
                       doc=""
                       )

    perseusType = device_property(dtype=str, default_value='simulated')
    perseusIp = device_property(dtype=str, default_value='192.168.0.142')
    FDLPath = device_property(dtype=str, default_value='/tmp')

    def init_device(self):
        self._itck_number = 0
        Device.init_device(self)
        try:
            self.perseus = Perseus().new_perseus(self.perseusType, self.perseusIp)
            self.set_state(DevState.ON)
        except Exception, e:
            print e
            self.set_state(DevState.FAULT)

    @DebugIt()
    def get_ItckNumber(self):
        return self._itck_number

    @DebugIt()
    def set_ItckNumber(self, ItckNumber):
        self._itck_number = ItckNumber

{% endblock %}

{% block end_code %}
    @command
    def init_hardware(self):
        try:
            self.perseus.init_hardware()
            self.set_state(DevState.RUNNING)
        except Exception, e:
            print e
            self.set_state(DevState.FAULT)

    @command
    def tuning_resetA(self):
        perseus_utils.write_direct(self.perseus, True, DIAG_TUNING_RESET_ADDRESS, 'A')
        perseus_utils.write_direct(self.perseus, False, DIAG_TUNING_RESET_ADDRESS, 'A')

    @command
    def reset_manual_itckA(self):
        perseus_utils.write_direct(self.perseus, True, RESET_MANUAL_ITCK_ADDRESS, 'A')
        perseus_utils.write_direct(self.perseus, False, RESET_MANUAL_ITCK_ADDRESS, 'A')

    @command
    def reset_itckA(self):
        perseus_utils.write_direct(self.perseus, True, RESET_ITCK_ADDRESS, 'A')
        perseus_utils.write_direct(self.perseus, False, RESET_ITCK_ADDRESS, 'A')

    @command
    def tuning_resetB(self):
        perseus_utils.write_direct(self.perseus, True, DIAG_TUNING_RESET_ADDRESS, 'B')
        perseus_utils.write_direct(self.perseus, False, DIAG_TUNING_RESET_ADDRESS, 'B')

    @command
    def reset_manual_itckB(self):
        perseus_utils.write_direct(self.perseus, True, RESET_MANUAL_ITCK_ADDRESS, 'B')
        perseus_utils.write_direct(self.perseus, False, RESET_MANUAL_ITCK_ADDRESS, 'B')

    @command
    def reset_itckB(self):
        perseus_utils.write_direct(self.perseus, True, RESET_ITCK_ADDRESS, 'B')
        perseus_utils.write_direct(self.perseus, False, RESET_ITCK_ADDRESS, 'B')

    @command
    def sw_fast_data_logger(self):
        # Ram init ... probably this should be done in init_device
        # but for the moment ...
        self.perseus.init_fast_data_logger()

        # Write delay
        self.perseus.write_fast_data_logger_delay()

        # Start recording data
        self.perseus.start_recording_data_in_ram()

        # Check status of external trigger when HWTrigger
        # Not needed right now

        # Transfer data from loops board RAM to Host PC
        now = datetime.datetime.now()
        filename = now.strftime("{0}/%Y_%m_%d__%H_%M_%S_diags_data.bin").format(self.FDLPath)
        self.perseus.get_ram_data(filename)

        # Check transfer data complete
        while self.perseus.get_transfer_over_register() is not RAM_TRANSFER_OVER:
            time.sleep(0.1) # @warning: super dangerous way of checking it ... who restarts the register?

        # Clear FDL trigger attribute
        # ... but ... HOW?

        # Restart RAM
        self.perseus.init_fast_data_logger()

    def update_fim(self):
        self.update_RvTet1()
        self.update_RvTet2()
        self.update_RvCircIn()
        self.update_FwLoad()
        self.update_FwHybLoad()
        self.update_RvCav()
        self.update_Arc()
        self.update_Vacuum()
        self.update_Manual()
        self.update_EndSwUp()
        self.update_EndSwDown()
        self.update_Mps()

    def update_RvTet1(self):
        bit0=self._DisitckRvtet1Dacsoffloopsstby
        bit1=self._DisitckRvtet1Pindiodeswitch
        bit2=self._DisitckRvtet1Fdltrg
        bit3=self._DisitckRvtet1Plctxoff
        bit4=self._DisitckRvtet1Mps
        bit5=self._DisitckRvtet1Diag
        value = (bit5 << 5) | (bit4 << 4) | (bit3 << 3) | (bit2 << 2) | (bit1 << 1) | (bit0 << 0)
        perseus_utils.write_direct(self.perseus, value, 7)

    def update_RvTet2(self):
        bit0=self._DisitckRvtet2Dacsoffloopsstby
        bit1=self._DisitckRvtet2Pindiodeswitch
        bit2=self._DisitckRvtet2Fdltrg
        bit3=self._DisitckRvtet2Plctxoff
        bit4=self._DisitckRvtet2Mps
        bit5=self._DisitckRvtet2Diag
        value = (bit5 << 5) | (bit4 << 4) | (bit3 << 3) | (bit2 << 2) | (bit1 << 1) | (bit0 << 0)
        perseus_utils.write_direct(self.perseus, value, 8)

    def update_RvCircIn(self):
        bit0=self._DisitckRvcircDacsoffloopsstby
        bit1=self._DisitckRvcircPindiodeswitch
        bit2=self._DisitckRvcircFdltrg
        bit3=self._DisitckRvcircPlctxoff
        bit4=self._DisitckRvcircMps
        bit5=self._DisitckRvcircDiag
        value = (bit5 << 5) | (bit4 << 4) | (bit3 << 3) | (bit2 << 2) | (bit1 << 1) | (bit0 << 0)
        perseus_utils.write_direct(self.perseus, value, 9)

    def update_FwLoad(self):
        bit0=self._DisitckFwloadDacsoffloopsstby
        bit1=self._DisitckFwloadPindiodeswitch
        bit2=self._DisitckFwloadFdltrg
        bit3=self._DisitckFwloadPlctxoff
        bit4=self._DisitckFwloadMps
        bit5=self._DisitckFwloadDiag
        value = (bit5 << 5) | (bit4 << 4) | (bit3 << 3) | (bit2 << 2) | (bit1 << 1) | (bit0 << 0)
        perseus_utils.write_direct(self.perseus, value, 10)

    def update_FwHybLoad(self):
        bit0=self._DisitckFwhybloadDacsoffloopsstby
        bit1=self._DisitckFwhybloadPindiodeswitch
        bit2=self._DisitckFwhybloadFdltrg
        bit3=self._DisitckFwhybloadPlctxoff
        bit4=self._DisitckFwhybloadMps
        bit5=self._DisitckFwhybloadDiag
        value = (bit5 << 5) | (bit4 << 4) | (bit3 << 3) | (bit2 << 2) | (bit1 << 1) | (bit0 << 0)
        perseus_utils.write_direct(self.perseus, value, 11)

    def update_RvCav(self):
        bit0=self._DisitckRvcavDacsoffloopsstby
        bit1=self._DisitckRvcavPindiodeswitch
        bit2=self._DisitckRvcavFdltrg
        bit3=self._DisitckRvcavPlctxoff
        bit4=self._DisitckRvcavMps
        bit5=self._DisitckRvcavDiag
        value = (bit5 << 5) | (bit4 << 4) | (bit3 << 3) | (bit2 << 2) | (bit1 << 1) | (bit0 << 0)
        perseus_utils.write_direct(self.perseus, value, 12)

    def update_Arc(self):
        bit0=self._DisitckArcsDacsoffloopsstby
        bit1=self._DisitckArcsPindiodeswitch
        bit2=self._DisitckArcsFdltrg
        bit3=self._DisitckArcsPlctxoff
        bit4=self._DisitckArcsMps
        bit5=self._DisitckArcsDiag
        value = (bit5 << 5) | (bit4 << 4) | (bit3 << 3) | (bit2 << 2) | (bit1 << 1) | (bit0 << 0)
        perseus_utils.write_direct(self.perseus, value, 13)

    def update_Vacuum(self):
        bit0=self._DisitckVacuumDacsoffloopsstby
        bit1=self._DisitckVacuumPindiodeswitch
        bit2=self._DisitckVacuumFdltrg
        bit3=self._DisitckVacuumPlctxoff
        bit4=self._DisitckVacuumMps
        bit5=self._DisitckVacuumDiag
        value = (bit5 << 5) | (bit4 << 4) | (bit3 << 3) | (bit2 << 2) | (bit1 << 1) | (bit0 << 0)
        perseus_utils.write_direct(self.perseus, value, 14)

    def update_Manual(self):
        bit0=self._DisitckManualInterlockDacsoffloopsstby
        bit1=self._DisitckManualInterlockPindiodeswitch
        bit2=self._DisitckManualInterlockFdltrg
        bit3=self._DisitckManualInterlockPlctxoff
        bit4=self._DisitckManualInterlockMps
        bit5=self._DisitckManualInterlockDiag
        value = (bit5 << 5) | (bit4 << 4) | (bit3 << 3) | (bit2 << 2) | (bit1 << 1) | (bit0 << 0)
        perseus_utils.write_direct(self.perseus, value, 15)

    def update_EndSwUp(self):
        bit0=self._DisitckPlungerEndSwitchesUpDacsoffloopsstby
        bit1=self._DisitckPlungerEndSwitchesUpPindiodeswitch
        bit2=self._DisitckPlungerEndSwitchesUpFdltrg
        bit3=self._DisitckPlungerEndSwitchesUpPlctxoff
        bit4=self._DisitckPlungerEndSwitchesUpMps
        bit5=self._DisitckPlungerEndSwitchesUpDiag
        value = (bit5 << 5) | (bit4 << 4) | (bit3 << 3) | (bit2 << 2) | (bit1 << 1) | (bit0 << 0)
        perseus_utils.write_direct(self.perseus, value, 16)

    def update_EndSwDown(self):
        bit0=self._DisitckPlungerEndSwitchesDownDacsoffloopsstby
        bit1=self._DisitckPlungerEndSwitchesDownPindiodeswitch
        bit2=self._DisitckPlungerEndSwitchesDownFdltrg
        bit3=self._DisitckPlungerEndSwitchesDownPlctxoff
        bit4=self._DisitckPlungerEndSwitchesDownMps
        bit5=self._DisitckPlungerEndSwitchesDownDiag
        value = (bit5 << 5) | (bit4 << 4) | (bit3 << 3) | (bit2 << 2) | (bit1 << 1) | (bit0 << 0)
        perseus_utils.write_direct(self.perseus, value, 17)

    def update_Mps(self):
        bit0=self._DisitckMpsDacsoffloopsstby
        bit1=self._DisitckMpsPindiodeswitch
        bit2=self._DisitckMpsFdltrg
        bit3=self._DisitckMpsPlctxoff
        bit4=self._DisitckMpsMps
        bit5=self._DisitckMpsDiag
        value = (bit5 << 5) | (bit4 << 4) | (bit3 << 3) | (bit2 << 2) | (bit1 << 1) | (bit0 << 0)
        perseus_utils.write_direct(self.perseus, value, 18)

def run_device():
    run([NutaqDiags])

if __name__ == "__main__":
    run_device()
{% endblock %}
