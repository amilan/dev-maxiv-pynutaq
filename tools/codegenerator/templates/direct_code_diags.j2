{% extends "base.j2" %}
{% block defines %}
#!/usr/bin/env python

###############################################################################
#     NutaqDiags device server.
#
#     Copyright (C) 2013  Max IV Laboratory, Lund Sweden
#
#     This program is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see [http://www.gnu.org/licenses/].
###############################################################################

"""This module contains the Nutaq device server for diagnostics.
"""

__all__ = ["NutaqDiags", "run_device"]

__author__ = 'antmil'

__docformat__ = 'restructuredtext'

# standard library imports
import time
import numpy
import math
import datetime

# 3rd party imports
from PyTango import AttrQuality, AttrWriteType, DispLevel, DevState, DebugIt
from PyTango.server import Device, DeviceMeta, attribute, command, run
from PyTango.server import device_property

# local imports
#from pynutaq.nutaqattributes import attributes_dict
from pynutaq.nutaq.nutaqdefs import *

import pynutaq.extra as extra_func

import pynutaq.perseus.perseusutils as perseus_utils

try:
    from pynutaq.perseus.perseusdefs import *
    from pynutaq.perseus.perseusfactory import Perseus
except ImportError, e:
    print e


class NutaqDiags(Device):
    __metaclass__ = DeviceMeta

{% endblock %}

{% block static_methods %}
    ItckNumber = attribute(label='ItckNumber',
                       dtype=int,
                       display_level=DispLevel.OPERATOR,
                       access=AttrWriteType.READ_WRITE,
                       unit='',
                       format='%6.2f',
                       min_value=0, max_value=7,
                       fget="get_ItckNumber",
                       fset="set_ItckNumber",
                       doc=""
                       )

    perseusType = device_property(dtype=str, default_value='simulated')
    perseusIp = device_property(dtype=str, default_value='192.168.0.142')
    FDLPath = device_property(dtype=str, default_value='/tmp')

    def init_device(self):
        self._itck_number = 0
        Device.init_device(self)
        try:
            self.perseus = Perseus().new_perseus(self.perseusType, self.perseusIp)
            self.set_events()
            self.set_state(DevState.ON)
        except Exception, e:
            print e
            self.set_state(DevState.FAULT)

    def set_events(self):
    {% for attribute in attributes %}
    {% if attribute.dtype != 'bool' %}
    {% endif %}
        self.set_change_event('{{attribute.name}}', True)
    {% endfor%}
    {% for diag_attr in diags_attributes %}
    {% if diag_attr.dtype != 'bool' %}
    {% endif %}
        self.set_change_event('Diag_{{diag_attr.name}}', True)
    {% endfor%}

    @DebugIt()
    def get_ItckNumber(self):
        return self._itck_number

    @DebugIt()
    def set_ItckNumber(self, ItckNumber):
        self._itck_number = ItckNumber

{% endblock %}

{% block end_code %}
    @command
    def init_hardware(self):
        try:
            self.perseus.init_hardware()
            self.set_state(DevState.RUNNING)
        except Exception, e:
            print e
            self.set_state(DevState.FAULT)

    @command
    def tuning_resetA(self):
        perseus_utils.write_direct(self.perseus, True, DIAG_TUNING_RESET_ADDRESS, 'A')
        perseus_utils.write_direct(self.perseus, False, DIAG_TUNING_RESET_ADDRESS, 'A')

    @command
    def reset_manual_itckA(self):
        perseus_utils.write_direct(self.perseus, True, RESET_MANUAL_ITCK_ADDRESS, 'A')
        perseus_utils.write_direct(self.perseus, False, RESET_MANUAL_ITCK_ADDRESS, 'A')

    @command
    def reset_itckA(self):
        perseus_utils.write_direct(self.perseus, True, RESET_ITCK_ADDRESS, 'A')
        perseus_utils.write_direct(self.perseus, False, RESET_ITCK_ADDRESS, 'A')

    @command
    def tuning_resetB(self):
        perseus_utils.write_direct(self.perseus, True, DIAG_TUNING_RESET_ADDRESS, 'B')
        perseus_utils.write_direct(self.perseus, False, DIAG_TUNING_RESET_ADDRESS, 'B')

    @command
    def reset_manual_itckB(self):
        perseus_utils.write_direct(self.perseus, True, RESET_MANUAL_ITCK_ADDRESS, 'B')
        perseus_utils.write_direct(self.perseus, False, RESET_MANUAL_ITCK_ADDRESS, 'B')

    @command
    def reset_itckB(self):
        perseus_utils.write_direct(self.perseus, True, RESET_ITCK_ADDRESS, 'B')
        perseus_utils.write_direct(self.perseus, False, RESET_ITCK_ADDRESS, 'B')

    @command
    def sw_fast_data_logger(self):
        # Ram init ... probably this should be done in init_device
        # but for the moment ...
        self.perseus.init_fast_data_logger()

        # Write delay
        self.perseus.write_fast_data_logger_delay()

        # Start recording data
        self.perseus.start_recording_data_in_ram()

        # Check status of external trigger when HWTrigger
        # Not needed right now

        # Transfer data from loops board RAM to Host PC
        now = datetime.datetime.now()
        filename = now.strftime("{0}/%Y_%m_%d__%H_%M_%S_diags_data.bin").format(self.FDLPath)
        self.perseus.get_ram_data(filename)

        # Check transfer data complete
        while self.perseus.get_transfer_over_register() is not RAM_TRANSFER_OVER:
            time.sleep(0.1) # @warning: super dangerous way of checking it ... who restarts the register?

        # Clear FDL trigger attribute
        # ... but ... HOW?

        # Restart RAM
        self.perseus.init_fast_data_logger()

    def update_fim(self, cavity):
        self.update_RvTet1(cavity)
        self.update_RvTet2(cavity)
        self.update_RvCircIn(cavity)
        self.update_FwLoad(cavity)
        self.update_FwHybLoad(cavity)
        self.update_RvCav(cavity)
        self.update_Arc(cavity)
        self.update_Vacuum(cavity)
        self.update_Manual(cavity)
        self.update_EndSwUp(cavity)
        self.update_EndSwDown(cavity)
        self.update_Mps(cavity)

    def update_RvTet1(self, cavity):
        bit0=getattr(self, "_DisitckRvtet1Dacsoffloopsstby%s" % cavity)
        bit1=getattr(self, "_DisitckRvtet1Pindiodeswitch%s" % cavity)
        bit2=getattr(self, "_DisitckRvtet1Fdltrg%s" % cavity)
        bit3=getattr(self, "_DisitckRvtet1Plctxoff%s" % cavity)
        bit4=getattr(self, "_DisitckRvtet1Mps%s" % cavity)
        bit5=getattr(self, "_DisitckRvtet1Diag%s" % cavity)
        value = (bit5 << 5) | (bit4 << 4) | (bit3 << 3) | (bit2 << 2) | (bit1 << 1) | (bit0 << 0)
        perseus_utils.write_direct(self.perseus, value, 7, cavity)

    def update_RvTet2(self, cavity):
        bit0=getattr(self, "_DisitckRvtet2Dacsoffloopsstby%s" % cavity)
        bit1=getattr(self, "_DisitckRvtet2Pindiodeswitch%s" % cavity)
        bit2=getattr(self, "_DisitckRvtet2Fdltrg%s" % cavity)
        bit3=getattr(self, "_DisitckRvtet2Plctxoff%s" % cavity)
        bit4=getattr(self, "_DisitckRvtet2Mps%s" % cavity)
        bit5=getattr(self, "_DisitckRvtet2Diag%s" % cavity)
        value = (bit5 << 5) | (bit4 << 4) | (bit3 << 3) | (bit2 << 2) | (bit1 << 1) | (bit0 << 0)
        perseus_utils.write_direct(self.perseus, value, 8, cavity)

    def update_RvCircIn(self, cavity):
        bit0=getattr(self, "_DisitckRvcircDacsoffloopsstby%s" % cavity)
        bit1=getattr(self, "_DisitckRvcircPindiodeswitch%s" % cavity)
        bit2=getattr(self, "_DisitckRvcircFdltrg%s" % cavity)
        bit3=getattr(self, "_DisitckRvcircPlctxoff%s" % cavity)
        bit4=getattr(self, "_DisitckRvcircMps%s" % cavity)
        bit5=getattr(self, "_DisitckRvcircDiag%s" % cavity)
        value = (bit5 << 5) | (bit4 << 4) | (bit3 << 3) | (bit2 << 2) | (bit1 << 1) | (bit0 << 0)
        perseus_utils.write_direct(self.perseus, value, 9, cavity)

    def update_FwLoad(self, cavity):
        bit0=getattr(self, "_DisitckFwloadDacsoffloopsstby%s" % cavity)
        bit1=getattr(self, "_DisitckFwloadPindiodeswitch%s" % cavity)
        bit2=getattr(self, "_DisitckFwloadFdltrg%s" % cavity)
        bit3=getattr(self, "_DisitckFwloadPlctxoff%s" % cavity)
        bit4=getattr(self, "_DisitckFwloadMps%s" % cavity)
        bit5=getattr(self, "_DisitckFwloadDiag%s" % cavity)
        value = (bit5 << 5) | (bit4 << 4) | (bit3 << 3) | (bit2 << 2) | (bit1 << 1) | (bit0 << 0)
        perseus_utils.write_direct(self.perseus, value, 10, cavity)

    def update_FwHybLoad(self, cavity):
        bit0=getattr(self, "_DisitckFwhybloadDacsoffloopsstby%s" % cavity)
        bit1=getattr(self, "_DisitckFwhybloadPindiodeswitch%s" % cavity)
        bit2=getattr(self, "_DisitckFwhybloadFdltrg%s" % cavity)
        bit3=getattr(self, "_DisitckFwhybloadPlctxoff%s" % cavity)
        bit4=getattr(self, "_DisitckFwhybloadMps%s" % cavity)
        bit5=getattr(self, "_DisitckFwhybloadDiag%s" % cavity)
        value = (bit5 << 5) | (bit4 << 4) | (bit3 << 3) | (bit2 << 2) | (bit1 << 1) | (bit0 << 0)
        perseus_utils.write_direct(self.perseus, value, 11, cavity)

    def update_RvCav(self, cavity):
        bit0=getattr(self, "_DisitckRvcavDacsoffloopsstby%s" % cavity)
        bit1=getattr(self, "_DisitckRvcavPindiodeswitch%s" % cavity)
        bit2=getattr(self, "_DisitckRvcavFdltrg%s" % cavity)
        bit3=getattr(self, "_DisitckRvcavPlctxoff%s" % cavity)
        bit4=getattr(self, "_DisitckRvcavMps%s" % cavity)
        bit5=getattr(self, "_DisitckRvcavDiag%s" % cavity)
        value = (bit5 << 5) | (bit4 << 4) | (bit3 << 3) | (bit2 << 2) | (bit1 << 1) | (bit0 << 0)
        perseus_utils.write_direct(self.perseus, value, 12, cavity)

    def update_Arc(self, cavity):
        bit0=getattr(self, "_DisitckArcsDacsoffloopsstby%s" % cavity)
        bit1=getattr(self, "_DisitckArcsPindiodeswitch%s" % cavity)
        bit2=getattr(self, "_DisitckArcsFdltrg%s" % cavity)
        bit3=getattr(self, "_DisitckArcsPlctxoff%s" % cavity)
        bit4=getattr(self, "_DisitckArcsMps%s" % cavity)
        bit5=getattr(self, "_DisitckArcsDiag%s" % cavity)
        value = (bit5 << 5) | (bit4 << 4) | (bit3 << 3) | (bit2 << 2) | (bit1 << 1) | (bit0 << 0)
        perseus_utils.write_direct(self.perseus, value, 13, cavity)

    def update_Vacuum(self, cavity):
        bit0=getattr(self, "_DisitckVacuumDacsoffloopsstby%s" % cavity)
        bit1=getattr(self, "_DisitckVacuumPindiodeswitch%s" % cavity)
        bit2=getattr(self, "_DisitckVacuumFdltrg%s" % cavity)
        bit3=getattr(self, "_DisitckVacuumPlctxoff%s" % cavity)
        bit4=getattr(self, "_DisitckVacuumMps%s" % cavity)
        bit5=getattr(self, "_DisitckVacuumDiag%s" % cavity)
        value = (bit5 << 5) | (bit4 << 4) | (bit3 << 3) | (bit2 << 2) | (bit1 << 1) | (bit0 << 0)
        perseus_utils.write_direct(self.perseus, value, 14, cavity)

    def update_Manual(self, cavity):
        bit0=getattr(self, "_DisitckManualInterlockDacsoffloopsstby%s" % cavity)
        bit1=getattr(self, "_DisitckManualInterlockPindiodeswitch%s" % cavity)
        bit2=getattr(self, "_DisitckManualInterlockFdltrg%s" % cavity)
        bit3=getattr(self, "_DisitckManualInterlockPlctxoff%s" % cavity)
        bit4=getattr(self, "_DisitckManualInterlockMps%s" % cavity)
        bit5=getattr(self, "_DisitckManualInterlockDiag%s" % cavity)
        value = (bit5 << 5) | (bit4 << 4) | (bit3 << 3) | (bit2 << 2) | (bit1 << 1) | (bit0 << 0)
        perseus_utils.write_direct(self.perseus, value, 15, cavity)

    def update_EndSwUp(self, cavity):
        bit0=getattr(self, "_DisitckPlungerEndSwitchesUpDacsoffloopsstby%s" % cavity)
        bit1=getattr(self, "_DisitckPlungerEndSwitchesUpPindiodeswitch%s" % cavity)
        bit2=getattr(self, "_DisitckPlungerEndSwitchesUpFdltrg%s" % cavity)
        bit3=getattr(self, "_DisitckPlungerEndSwitchesUpPlctxoff%s" % cavity)
        bit4=getattr(self, "_DisitckPlungerEndSwitchesUpMps%s" % cavity)
        bit5=getattr(self, "_DisitckPlungerEndSwitchesUpDiag%s" % cavity)
        value = (bit5 << 5) | (bit4 << 4) | (bit3 << 3) | (bit2 << 2) | (bit1 << 1) | (bit0 << 0)
        perseus_utils.write_direct(self.perseus, value, 16, cavity)

    def update_EndSwDown(self, cavity):
        bit0=getattr(self, "_DisitckPlungerEndSwitchesDownDacsoffloopsstby%s" % cavity)
        bit1=getattr(self, "_DisitckPlungerEndSwitchesDownPindiodeswitch%s" % cavity)
        bit2=getattr(self, "_DisitckPlungerEndSwitchesDownFdltrg%s" % cavity)
        bit3=getattr(self, "_DisitckPlungerEndSwitchesDownPlctxoff%s" % cavity)
        bit4=getattr(self, "_DisitckPlungerEndSwitchesDownMps%s" % cavity)
        bit5=getattr(self, "_DisitckPlungerEndSwitchesDownDiag%s" % cavity)
        value = (bit5 << 5) | (bit4 << 4) | (bit3 << 3) | (bit2 << 2) | (bit1 << 1) | (bit0 << 0)
        perseus_utils.write_direct(self.perseus, value, 17, cavity)

    def update_Mps(self, cavity):
        bit0=getattr(self, "_DisitckMpsDacsoffloopsstby%s" % cavity)
        bit1=getattr(self, "_DisitckMpsPindiodeswitch%s" % cavity)
        bit2=getattr(self, "_DisitckMpsFdltrg%s" % cavity)
        bit3=getattr(self, "_DisitckMpsPlctxoff%s" % cavity)
        bit4=getattr(self, "_DisitckMpsMps%s" % cavity)
        bit5=getattr(self, "_DisitckMpsDiag%s" % cavity)
        value = (bit5 << 5) | (bit4 << 4) | (bit3 << 3) | (bit2 << 2) | (bit1 << 1) | (bit0 << 0)
        perseus_utils.write_direct(self.perseus, value, 18, cavity)

def run_device():
    run([NutaqDiags])

if __name__ == "__main__":
    run_device()
{% endblock %}
